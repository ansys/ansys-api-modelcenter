// Â©2023, ANSYS Inc. Unauthorized use, distribution or duplication is prohibited.

/*
 * This file contains the gRPC ModelCenter workflow.
 */

syntax = "proto3";
package ansys.api.modelcenter.v0.grpc_modelcenter_workflow;

import "ansys/api/modelcenter/v0/custom_metadata_messages.proto";
import "ansys/api/modelcenter/v0/element_messages.proto";
import "ansys/api/modelcenter/v0/variable_value_messages.proto";
import "ansys/api/modelcenter/v0/workflow_messages.proto";

service ModelCenterWorkflowService {

  /**
  * Get an element name.
  */
  rpc ElementGetName(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ElementName);

  /**
  * Get an element's full name.

  */
  rpc ElementGetFullName(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ElementName);

  /**
  * Get the parent element of an element.

  */
  rpc ElementGetParentElement(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.workflow_messages.ElementInfo);

  /**
  * Get the custom metadata properties available for an element.
  */
  rpc PropertyOwnerGetProperties(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.custom_metadata_messages.MetadataPropertyNamesResponse);

  /**
  * Set the value of a custom metadata property.
  *
  * NOT_FOUND if the specified element does not exist.
  * INVALID_ARGUMENT if the property value is missing.
  */
  rpc PropertyOwnerSetPropertyValue(ansys.api.modelcenter.v0.custom_metadata_messages.MetadataSetValueRequest)
    returns (ansys.api.modelcenter.v0.custom_metadata_messages.MetadataSetValueResponse);

  /**
  * Get the value of a custom metadata property.
  *
  * NOT_FOUND if the specified element does not exist.
  * INVALID_ARGUMENT if the specified property doesn't exist
  */
  rpc PropertyOwnerGetPropertyValue(ansys.api.modelcenter.v0.custom_metadata_messages.MetadataGetValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableValue);

  /**
  * Get the variables available on an assembly.
  */
  rpc RegistryGetVariables(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableInfoCollection);

  /**
  * Get the groups available on an assembly.
  */
  rpc RegistryGetGroups(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ElementIdCollection);

  /**
  * Get the type of an assembly.
  */
  rpc RegistryGetControlType(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.AssemblyType);

  /**
  * Get the child assemblies and components of an assembly.
  */
  rpc AssemblyGetAssembliesAndComponents(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.workflow_messages.ElementInfoCollection);

  /**
  * Add a child assembly.
  *
  * NOT_FOUND if the specified parent assembly can't be found.
  * INVALID_ARGUMENT if the name / position / type are invalid.
  * ALREADY_EXISTS if there is a name collision
  */
  rpc AssemblyAddAssembly(ansys.api.modelcenter.v0.element_messages.AddAssemblyRequest)
    returns (ansys.api.modelcenter.v0.element_messages.AddAssemblyResponse);

  /**
  * Add a variable to an assembly.
  *
  * NOT_FOUND if the specified parent assembly can't be found.
  * INVALID_ARGUMENT if the name / position / type are invalid.
  * ALREADY_EXISTS if theere is a name collision
  */
  rpc AssemblyAddVariable(ansys.api.modelcenter.v0.element_messages.AddAssemblyVariableRequest)
    returns (ansys.api.modelcenter.v0.element_messages.AddAssemblyVariableResponse);

  /**
  * Delete a variable on an assembly.
  *
  * NOT_FOUND if the specified parent assembly can't be found.
  * No error should be raised if the specified variable is already nonexistent (see response).
  */
  rpc AssemblyDeleteVariable(ansys.api.modelcenter.v0.workflow_messages.DeleteAssemblyVariableRequest)
    returns (ansys.api.modelcenter.v0.element_messages.DeleteAssemblyVariableResponse);

  /**
  * Rename an assembly.
  *
  * NOT_FOUND if the specified parent assembly can't be found.
  * INVALID_ARGUMENT if the new name is invalid.
  * ALREADY_EXISTS if there is a name collision.
  */
  rpc AssemblyRename(ansys.api.modelcenter.v0.element_messages.RenameRequest)
    returns (ansys.api.modelcenter.v0.element_messages.RenameResponse);

  /**
  * Set an assembly's icon.
  */
  rpc AssemblySetIcon(ansys.api.modelcenter.v0.element_messages.AssemblyIconSetRequest)
    returns (ansys.api.modelcenter.v0.element_messages.AssemblyIconSetResponse);

  /**
  * Get an assembly's icon.
  */
  rpc AssemblyGetIcon(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.AssemblyIconResponse);

  /**
  * Get an element's index in its parent.
  */
  rpc ElementGetIndexInParent(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ElementIndexParentResponse);

  /**
  * Get an assembly's position on the analysis view.
  */
  rpc AssemblyGetAnalysisViewPosition(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.AnalysisViewPosition);

  /**
  * Get an assembly's source.
  */
  rpc ComponentGetSource(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentSourceResponse);

  /**
  * Get a component's pacz URL.
  */
  rpc ComponentGetPaczUrl(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentPaczUrlResponse);

  /**
  * Run the specified component.
  */
  rpc ComponentRun(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentRunResponse);

  /**
   * Invoke a method on the specified component.
   *
   * NOT_FOUND if the target component doesn't exist
   * INVALID_ARGUMENT if the target method can't be found
   * FAILED_PRECONDITION if the method run fails
   */
  rpc ComponentInvokeMethod(ansys.api.modelcenter.v0.element_messages.ComponentInvokeMethodRequest)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentInvokeMethodResponse);

  /**
   * Invalidate the specified component.
   */
  rpc ComponentInvalidate(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentInvalidateResponse);

  /**
   * Reconnect or reload the specified component.
   *
   * FAILED_PRECONDITION if the reconnect fails
   */
  rpc ComponentReconnect(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentReconnectResponse);

  /**
   * Download the component's variable values if it is a ModelCenter Remote Execution component.
   *
   * FAILED_PRECONDITION if the download fails
   */
  rpc ComponentDownloadValues(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentDownloadValuesResponse);

  /*
   * Get if a component is connected to its source.
   * A component may be disconnected from its source if it fails to connect on load, and
   * OnConnectionModeError is set to IGNORE.
   */
  rpc ComponentIsConnected(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.ComponentIsConnectedResponse);

  /**
   * Get whether the branching condition is exclusive.
   */
  rpc IfComponentGetExclusive(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentGetExclusiveResponse);

  /**
   * Set whether the branching condition is exclusive.
   */
  rpc IfComponentSetExclusive(ansys.api.modelcenter.v0.element_messages.IfComponentSetExclusiveRequest)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentSetExclusiveResponse);

  /**
   * Get if there is an else branch that is run if no conditions are met.
   */
  rpc IfComponentGetRunLastBranchByDefault(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentGetRunLastBranchDefaultResponse);

  /**
   * Set if there is an else branch that is run if no conditions are met.
   */
  rpc IfComponentSetRunLastBranchByDefault(
    ansys.api.modelcenter.v0.element_messages.IfComponentSetRunLastBranchDefaultRequest
    )
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentSetRunLastBranchDefaultResponse);

  /**
   * Get the number of branches.
   */
  rpc IfComponentGetNumberOfBranches(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentGetNumberBranchesResponse);

  /**
   * Get the branch condition for a branch.
   */
  rpc IfComponentGetBranchCondition(ansys.api.modelcenter.v0.element_messages.IfComponentGetBranchConditionRequest)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentGetBranchConditionResponse);

  /**
   * Set the branch condition for a branch.
   */
  rpc IfComponentSetBranchCondition(ansys.api.modelcenter.v0.element_messages.IfComponentSetBranchConditionRequest)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentSetBranchConditionResponse);

  /**
   * Get the name of a branch.
   */
  rpc IfComponentGetBranchName(ansys.api.modelcenter.v0.element_messages.IfComponentGetBranchNameRequest)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentGetBranchNameResponse);

  /**
   * Set the name of a branch.
   */
  rpc IfComponentSetBranchName(ansys.api.modelcenter.v0.element_messages.IfComponentSetBranchNameRequest)
    returns (ansys.api.modelcenter.v0.element_messages.IfComponentSetBranchNameResponse);

  /**
   * Get the data type of a variable.
   */
  rpc VariableGetType(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableTypeResponse);

  /**
   * Get the state of a variable.
   */
  rpc VariableGetState(ansys.api.modelcenter.v0.workflow_messages.ElementIdOrName)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableState);

  /**
   * Finds any variables linked as an output to this variable, either returning only direct dependent variables
   * or recursively fetching all dependent variables.
   */
  rpc VariableGetDependents(ansys.api.modelcenter.v0.variable_value_messages.GetVariableDependenciesRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableInfoCollection);

  /**
   * Finds any variables linked as an input to this variable, either returning only direct precedent variables
   * or recursively fetching all precedent variables.
   */
  rpc VariableGetPrecedents(ansys.api.modelcenter.v0.variable_value_messages.GetVariableDependenciesRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableInfoCollection);

  // TODO: May be able to delete
  /**
   * Get the value of a double array variable.
   */
  rpc DoubleArrayGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.DoubleArrayValue);

  /**
   * Set the value of a double array variable.
   *
   * NOT_FOUND if target variable cannot be located
   * INVALID_ARGUMENT if target variable is not a double array
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc DoubleArraySetValue(ansys.api.modelcenter.v0.variable_value_messages.SetDoubleArrayValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a file array variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc FileArrayGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.FileArrayValue);

  /**
   * Set the value of a file array variable.
   */
  rpc FileArraySetValue(ansys.api.modelcenter.v0.variable_value_messages.SetFileArrayValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a integer array variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc IntegerArrayGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.IntegerArrayValue);

  /**
   * Set the value of a integer array variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc IntegerArraySetValue(ansys.api.modelcenter.v0.variable_value_messages.SetIntegerArrayValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a boolean array variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc BooleanArrayGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.BooleanArrayValue);

  /**
   * Set the value of a boolean array variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc BooleanArraySetValue(ansys.api.modelcenter.v0.variable_value_messages.SetBooleanArrayValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a string array variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc StringArrayGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.StringArrayValue);

  /**
   * Set the value of a string array variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc StringArraySetValue(ansys.api.modelcenter.v0.variable_value_messages.SetStringArrayValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  /**
   * Set the values of the referenced variables in a reference array.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUMENT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc ReferenceArraySetReferencedValues(ansys.api.modelcenter.v0.variable_value_messages.SetDoubleArrayValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a double variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc DoubleVariableGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.DoubleValue);

  /**
   * Set the value of a double variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc DoubleVariableSetValue(ansys.api.modelcenter.v0.variable_value_messages.SetDoubleValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a integer variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc IntegerVariableGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.IntegerValue);

  /**
   * Set the value of a integer variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc IntegerVariableSetValue(ansys.api.modelcenter.v0.variable_value_messages.SetIntegerValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a boolean variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc BooleanVariableGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.BooleanValue);

  /**
   * Set the value of a boolean variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc BooleanVariableSetValue(ansys.api.modelcenter.v0.variable_value_messages.SetBooleanValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a string variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc StringVariableGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.StringValue);

  /**
   * Set the value of a string variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc StringVariableSetValue(ansys.api.modelcenter.v0.variable_value_messages.SetStringValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  // TODO: May be able to delete
  /**
   * Get the value of a file variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   */
  rpc FileVariableGetValue(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.FileValue);

  /**
   * Set the value of a file array variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUMENT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc FileVariableSetValue(ansys.api.modelcenter.v0.variable_value_messages.SetFileValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  /**
   * Get the value of a reference variable or member of a reference array variable.
   * If necessary, the workflow will be run such that the variable value is valid
   * before the value is returned.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   */
  rpc ReferenceVariableGetValue(ansys.api.modelcenter.v0.variable_value_messages.GetReferenceValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableState);

  /**
   * Set the value of a reference variable or member of a reference array variable.
   *
   * NOT_FOUND if the target variable cannot be located
   * INVALID_ARGUEMNT if target variable is not the right type
   * OUT_OF_RANGE if bounds or enum constraints are violated
   */
  rpc ReferenceVariableSetValue(ansys.api.modelcenter.v0.variable_value_messages.SetReferenceValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetVariableValueResponse);

  /**
   * Get whether or not a variable is an input to its component and in the workflow.
   */
  rpc VariableGetIsInput(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.element_messages.VariableIsInputResponse);

  /**
   * Get the metadata for a boolean or boolean array variable.
   */
  rpc BooleanVariableGetMetadata(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.BooleanVariableMetadata);

  /**
   * Get the metadata for a double or double array variable.
   */
  rpc DoubleVariableGetMetadata(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.DoubleVariableMetadata);

  /**
   * Get the metadata for an integer or integer array variable.
   */
  rpc IntegerVariableGetMetadata(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.IntegerVariableMetadata);

  /**
   * Get the metadata for a string or string array variable.
   */
  rpc StringVariableGetMetadata(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.StringVariableMetadata);

  /**
   * Get the metadata for a file or file array variable.
   */
  rpc FileVariableGetMetadata(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.FileVariableMetadata);

  /**
   * Set the metadata for a boolean or boolean array variable.
   *
   * NOT_FOUND if the target element can't be found
   * INVALID_ARGUMENT if the target element is not a boolean or boolean array
   */
  rpc BooleanVariableSetMetadata(ansys.api.modelcenter.v0.variable_value_messages.SetBooleanVariableMetadataRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetMetadataResponse);

  /**
   * Set the metadata for a double or double array variable.
   *
   * NOT_FOUND if the target element can't be found
   * INVALID_ARGUMENT if the target element is not a double or double array
   */
  rpc DoubleVariableSetMetadata(ansys.api.modelcenter.v0.variable_value_messages.SetDoubleVariableMetadataRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetMetadataResponse);

  /**
   * Set the metadata for an integer or integer array variable.
   *
   * NOT_FOUND if the target element can't be found
   * INVALID_ARGUMENT if the target element is not an integer or integer array
   */
  rpc IntegerVariableSetMetadata(ansys.api.modelcenter.v0.variable_value_messages.SetIntegerVariableMetadataRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetMetadataResponse);

  /**
   * Set the metadata for a string or string array variable.
   *
   * NOT_FOUND if the target element can't be found
   * INVALID_ARGUMENT if the target element is not a string or string array
   */
  rpc StringVariableSetMetadata(ansys.api.modelcenter.v0.variable_value_messages.SetStringVariableMetadataRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetMetadataResponse);

  /**
   * Set the metadata for a file or file array variable.
   *
   * NOT_FOUND if the target element can't be found
   * INVALID_ARGUMENT if the target element is not a file or file array
   */
  rpc FileVariableSetMetadata(ansys.api.modelcenter.v0.variable_value_messages.SetFileVariableMetadataRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetMetadataResponse);

  /**
   * Get the state of the workflow's execution.
   */
  rpc WorkflowGetState(ansys.api.modelcenter.v0.workflow_messages.GetWorkflowStateRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.GetWorkflowStateResponse);

  /**
   * Execute the workflow.
   *
   * NOT_FOUND if the target workflow doesn't exist
   * INVALID_ARGUMENT if there are:
   *    invalid names in the request
   *    mismatched types for values in the request
   * OUT_OF_RANGE if input values violate enum, bounds
   */
  rpc WorkflowRun(ansys.api.modelcenter.v0.workflow_messages.WorkflowRunRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowRunResponse);

  /**
   * Start executing the workflow, and allow it to run asynchronously.
   *
  * NOT_FOUND if the target workflow doesn't exist
   * INVALID_ARGUMENT if there are:
   *    invalid names in the request
   *    mismatched types for values in the request
   * OUT_OF_RANGE if input values violate enum, bounds
   */
  rpc WorkflowStartRun(ansys.api.modelcenter.v0.workflow_messages.WorkflowRunRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowStartRunResponse);

  /**
   * Stop executing the workflow.
   */
  rpc WorkflowHalt(ansys.api.modelcenter.v0.workflow_messages.WorkflowHaltRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowHaltResponse);

  /**
   * Get the root element of the workflow.
   */
  rpc WorkflowGetRoot(ansys.api.modelcenter.v0.workflow_messages.WorkflowId)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowGetRootResponse);

  /**
   * Get the directory for a workflow.
   */
  rpc WorkflowGetDirectory(ansys.api.modelcenter.v0.workflow_messages.WorkflowId)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowGetDirectoryResponse);

  /**
   * Create a component within the workflow.
   *
   * NOT_FOUND if the parent assembly isn't found
   * INVALID_ARGUMENT if:
   *   connection fails, name is invalid
   * ALREADY_EXISTS if:
   *    name is invalid
   */
  rpc WorkflowCreateComponent(ansys.api.modelcenter.v0.workflow_messages.WorkflowCreateComponentRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowCreateComponentResponse);

  /**
   * Create a link within the workflow.
   *
   * INVALID_ARGUMENT if: LHS or RHS are not valid
   */
  rpc WorkflowCreateLink(ansys.api.modelcenter.v0.workflow_messages.WorkflowCreateLinkRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowCreateLinkResponse);

  /**
   * Save the workflow to its current location.
   */
  rpc WorkflowSave(ansys.api.modelcenter.v0.workflow_messages.WorkflowId)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowSaveResponse);

  /**
   * Save the workflow to a new location.
   *
   * INVALID_ARGUMENT if: new path is not valid
   */
  rpc WorkflowSaveAs(ansys.api.modelcenter.v0.workflow_messages.WorkflowSaveAsRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowSaveResponse);

  /**
   * Close the workflow.
   *
   * NOT_FOUND if specified workflow does not exist
   */
  rpc WorkflowClose(ansys.api.modelcenter.v0.workflow_messages.WorkflowId)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowCloseResponse);

  /**
   * Remove a component from the workflow.
   *
   * Does not error if the specified component has already been removed.
   */
  rpc WorkflowRemoveComponent(ansys.api.modelcenter.v0.workflow_messages.WorkflowRemoveComponentRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowRemoveComponentResponse);

  /**
   * Break a link within the workflow.
   *
   * NOT_FOUND if the lhs isn't valid
   */
  rpc WorkflowBreakLink(ansys.api.modelcenter.v0.workflow_messages.WorkflowBreakLinkRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowBreakLinkResponse);

  /**
   * Suspend a link within the workflow.
   *
   * The returning message indicates whether the link WAS suspended before this RPC was called.
   * A successful return indicates that the state was correctly set; a mismatch in the returned
   * state does not mean that there was a failure.
   *
   * NOT_FOUND if the lhs isn't valid
   */
  rpc WorkflowSuspendOrResumeLink(ansys.api.modelcenter.v0.workflow_messages.WorkflowSuspendOrResumeLinkRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowLinkSuspension);

  /**
   * Get the suspension state of a link.
   */
  rpc WorkflowGetLinkSuspensionState(ansys.api.modelcenter.v0.workflow_messages.WorkflowBreakLinkRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowLinkSuspension);

  /**
   * Auto-link two components within the workflow.
   * The created links are returned.
   *
   * INVALID_ARGUMENT if either component can't be located.
   */
  rpc WorkflowAutoLink(ansys.api.modelcenter.v0.workflow_messages.WorkflowAutoLinkRequest)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowAutoLinkResponse);

  /**
   * Get a list of all the links in the workflow.
   */
  rpc WorkflowGetLinksRequest(ansys.api.modelcenter.v0.workflow_messages.WorkflowId)
    returns (ansys.api.modelcenter.v0.workflow_messages.WorkflowGetLinksResponse);

  /**
   * Get a component or assembly's ID and type by name.
   */
  rpc WorkflowGetElementByName(ansys.api.modelcenter.v0.workflow_messages.NamedElementWorkflow)
    returns (ansys.api.modelcenter.v0.workflow_messages.ElementInfo);

  /**
   * Get the reference equation of a reference variable.
   */
  rpc ReferenceVariableGetReferenceEquation(
    ansys.api.modelcenter.v0.variable_value_messages.GetReferenceEquationRequest
    )
    returns (ansys.api.modelcenter.v0.variable_value_messages.GetReferenceEquationResponse);

  /**
   * Set the reference equation of a reference variable.
   */
  rpc ReferenceVariableSetReferenceEquation(
    ansys.api.modelcenter.v0.variable_value_messages.SetReferenceEquationRequest
    )
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetReferenceEquationResponse);

  /**
   * Get the variables referenced by a reference variable.
   */
  rpc ReferenceVariableGetReferencedVariables(
    ansys.api.modelcenter.v0.variable_value_messages.GetReferencedVariablesRequest
    )
    returns (ansys.api.modelcenter.v0.variable_value_messages.GetReferencedVariablesResponse);

  /**
   * Get variable metadata for a reference or reference array variable.
   *
   * Note that reference properties are a distinct concept from variable metadata,
   * and they need to be retrieved separately.
   */
  rpc ReferenceVariableGetMetadata(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.ReferenceVariableMetadata);

  /**
   * Set variable metadata for a reference or reference array variable.
   *
   * Note that reference properties are a distinct concept from variable metadata,
   * and they need to be manipulated separately.
   */
  rpc ReferenceVariableSetMetadata(
    ansys.api.modelcenter.v0.variable_value_messages.SetReferenceVariableMetadataRequest
  )
    returns (ansys.api.modelcenter.v0.variable_value_messages.SetMetadataResponse);

  /**
   * Get whether a reference variable refers directly to a single variable.
   */
  rpc ReferenceVariableGetIsDirect(ansys.api.modelcenter.v0.variable_value_messages.GetReferenceIsDirectRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.GetReferenceIsDirectResponse);

  /**
   * Get the available reference properties of a reference variable
   */
  rpc ReferenceVariableGetReferenceProperties(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyNames);

  /**
   * Get the value of a reference property.
   *
   * The workflow is not executed to attempt to validate the property.
   * An index is only required in the request if the property in question
   * is a property of a reference array.
   * Otherwise, the index should be blank.
   */
  rpc ReferencePropertyGetValue(ansys.api.modelcenter.v0.variable_value_messages.IndexedReferencePropertyIdentifier)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableState);

  /**
   * Set the value of a reference property.
   *
   * An index is only required in the request if the property in question
   * is a property of a reference array.
   * Otherwise, the index should be blank.
   */
  rpc ReferencePropertySetValue(ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertySetValueRequest)
    returns (ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertySetValueResponse);

  /**
   * Get whether a reference property is an input.
   */
  rpc ReferencePropertyGetIsInput(ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyIdentifier)
    returns (ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyGetIsInputResponse);

  /**
   * Get the title of a reference property.
   */
  rpc ReferencePropertyGetTitle(ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyIdentifier)
    returns (ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyGetTitleResponse);

  /**
   * Get the metadata items from a reference property.
   */
  rpc ReferencePropertyGetMetadata(ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyIdentifier)
    returns (ansys.api.modelcenter.v0.variable_value_messages.VariableMetadata);

  /**
   * Get the type of a reference property.
   */
  rpc ReferencePropertyGetType(ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyIdentifier)
    returns (ansys.api.modelcenter.v0.variable_value_messages.ReferencePropertyGetTypeResponse);

  /**
   * Get the length of a reference array.
   */
  rpc ReferenceArrayGetLength(ansys.api.modelcenter.v0.element_messages.ElementId)
    returns (ansys.api.modelcenter.v0.variable_value_messages.IntegerValue);

  /**
   * Move a component or assembly under a new parent.
   */
  rpc WorkflowMoveComponent(ansys.api.modelcenter.v0.workflow_messages.MoveComponentRequest)
    returns (ansys.api.modelcenter.v0.element_messages.ElementIndexParentResponse);
}
