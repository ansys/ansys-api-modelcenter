// Â©2023, ANSYS Inc. Unauthorized use, distribution or duplication is prohibited.

/*
 * This file contains messages related to the variable values.
 */

syntax = "proto3";
package ansys.api.modelcenter.v0.variable_value_messages;

import "ansys/api/modelcenter/v0/element_messages.proto";


/**
 * A message representing the value of a file variable.
 */
message FileValue {
  /**
   * The actual content path for the file variable.
   */
  string content_path = 1;
}

/**
 * A request to set the value of a file variable.
 */
message SetFileValueRequest {
  /**
   * The target variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  FileValue new_value = 2;
}

/**
 * A message representing the dimensions of an array.
 */
message ArrayDimensions {
  /**
   * The length of each dimension of the array.
   */
  repeated uint64 dims = 1;
}

/**
 * A message representing a file array value.
 */
message FileArrayValue {
  /**
   * All the values in the array, linearized.
   */
  repeated FileValue values = 1;

  /**
   * The actual dimensions of the array.
   */
  ArrayDimensions dims = 2;
}

/**
 * A request to set the value of a file array.
 */
message SetFileArrayValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  FileArrayValue new_value = 2;
}

/**
 * A message representing the value of a double variable.
 */
message DoubleValue {
  /**
   * The value.
   */
  double value = 1;
}

/**
 * A request to set the value of a double value.
 */
message SetDoubleValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  double new_value = 2;
}

/**
 * A message representing a double array value.
 */
message DoubleArrayValue {
  /**
   * All the values in the array, linearized.
   */
  repeated double values = 1;

  /**
   * The actual dimensions of the array.
   */
  ArrayDimensions dims = 2;
}

/**
 * A request to set the value of a double array.
 */
message SetDoubleArrayValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  DoubleArrayValue new_value = 2;
}

/**
 * A message representing an integer value.
 */
message IntegerValue {
  /**
   * The integer value.
   */
  int32 value = 1;
}

/**
 * A request to set the value of an integer variable.
 */
message SetIntegerValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  int32 new_value = 2;
}

/**
 * A message representing a integer array value.
 */
message IntegerArrayValue {
  /**
   * All the values in the array, linearized.
   */
  repeated int32 values = 1;

  /**
   * The actual dimensions of the array.
   */
  ArrayDimensions dims = 2;
}

/**
 * A request to set the value of an integer array.
 */
message SetIntegerArrayValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  IntegerArrayValue new_value = 2;
}

/**
 * A message representing a double array value.
 */
message BooleanArrayValue {
  /**
   * All the values in the array, linearized.
   */
  repeated bool values = 1;

  /**
   * The actual dimensions of the array.
   */
  ArrayDimensions dims = 2;
}

/**
 * A request to set the value of a boolean array.
 */
message SetBooleanArrayValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  BooleanArrayValue new_value = 2;
}

/**
 * A message representing a boolean value.
 */
message BooleanValue {
  /**
   * The boolean value.
   */
  bool value = 1;
}

/**
 * A request to set a boolean value.
 */
message SetBooleanValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  bool new_value = 2;
}

/**
 * A message representing a string array value.
 */
message StringArrayValue {
  /**
   * All the values in the array, linearized.
   */
  repeated string values = 1;

  /**
   * The actual dimensions of the array.
   */
  ArrayDimensions dims = 2;
}

/**
 * A request to set the value of a string array.
 */
message SetStringArrayValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  StringArrayValue new_value = 2;
}

/**
 * A message representing a string value.
 */
message StringValue {
  /**
   * The string value.
   */
  string value = 1;
}

/**
 * A request to set the value of a string variable.
 */
message SetStringValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new value.
   */
  string new_value = 2;
}

/**
 * A request to get the value of a reference variable.
 */
message GetReferenceValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The index of the variable to modify in a reference array. Omit for scalar variables.
   */
  optional int64 index = 2;
}

/**
 * A request to set the value of a reference variable.
 */
message SetReferenceValueRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The index of the variable to modify in a reference array. Omit for scalar variables.
   */
  optional int64 index = 2;

  /**
   * The new value.
   */
  VariableValue new_value = 3;
}

/**
 * A response to a request to set a variable value.
 */
message SetVariableValueResponse {
  /**
   * True if the value of the variable was changed.
   */
  bool was_changed = 1;
}

/**
 * An enumeration of the possible variable value types.
 */
enum VariableType {
  /**
   * The variable type is unspecified.
   */
  VARIABLE_TYPE_UNSPECIFIED = 0;

  /**
   * A 64-bit signed integer.
   */
  VARIABLE_TYPE_INTEGER = 1;

  /**
   * A double-precision floating-point number.
   */
  VARIABLE_TYPE_REAL = 2;

  /**
   * A boolean value.
   */
  VARIABLE_TYPE_BOOLEAN = 3;

  /**
   * A string value.
   */
  VARIABLE_TYPE_STRING = 4;

  /**
   * A file value.
   */
  VARIABLE_TYPE_FILE = 5;

  /**
   * An array of 64-bit integers.
   */
  VARIABLE_TYPE_INTEGER_ARRAY = 6;

  /**
   * An array of double-precision floating point numbers.
   */
  VARIABLE_TYPE_REAL_ARRAY = 7;

  /**
   * An array of boolean values.
   */
  VARIABLE_TYPE_BOOLEAN_ARRAY = 8;

  /**
   * An array of string values.
   */
  VARIABLE_TYPE_STRING_ARRAY = 9;

  /**
   * An array of file values.
   */
  VARIABLE_TYPE_FILE_ARRAY = 10;

  /**
   * A reference to another variable.
   */
  VARIABLE_TYPE_REFERENCE = 11;

  /**
   * An array of references to other variables.
   */
  VARIABLE_TYPE_REFERENCE_ARRAY = 12;
}

/**
 * A message representing a variable value which could be of any type.
 */
message VariableValue {
  /**
   * The value of the variable.
   */
  oneof value {
    int64 int_value = 1;
    double double_value = 2;
    bool bool_value = 3;
    string string_value = 4;
    FileValue file_value = 5;
    IntegerArrayValue int_array_value = 6;
    DoubleArrayValue double_array_value = 7;
    BooleanArrayValue bool_array_value = 8;
    StringArrayValue string_array_value = 9;
    FileArrayValue file_array_value = 10;
  }
}

/**
 * A response indicating the requested variable's type.
 */
message VariableTypeResponse {
  /**
   * The data type.
   */
  VariableType var_type = 1;

  /**
   * The ModelCenter type string.
   * ModelCenter has separate types for some geometry formats;
   * those formats are string data but the variable type may be different.
   */
  string mc_type = 2;
}

/**
 * A message combining a variable value and validity flag.
 */
message VariableState {
  /**
   * The value of the variable.
   */
  VariableValue value = 1;

  /**
   * The validity of the variable.
   */
  bool is_valid = 2;
}

/**
 * A response to a request to set a variable value.
 */
message SetMetadataResponse {

}

/**
 * The base metadata shared by all metadata types.
 */
message BaseVariableMetadata {
  /**
   * A description of the variable.
   */
  optional string description = 1;

  /**
   * Additional user-defined metadata.
   */
  map<string, VariableValue> custom_metadata = 2;
}

/**
 * Metadata shared by all numeric types.
 */
message NumericVariableMetadata {
  /**
   * The units of the variable.
   */
  optional string units = 1;

  /**
   * The display format of the variable.
   */
  optional string display_format = 2;
}

/**
 * The metadata for boolean or boolean array variable.
 */
message BooleanVariableMetadata {
  /**
   * The base metadata.
   */
  BaseVariableMetadata base_metadata = 1;
}

/**
 * A request to set the metadata for a boolean variable.
 */
message SetBooleanVariableMetadataRequest {
  /**
   * The target variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new metadata to use.
   */
  BooleanVariableMetadata new_metadata = 2;
}

/**
 * The metadata for a double or double array variable.
 */
message DoubleVariableMetadata {
  /**
   * The base metadata.
   */
  BaseVariableMetadata base_metadata = 1;

  /**
   * The numeric metadata.
   */
  NumericVariableMetadata numeric_metadata = 2;

  /**
   * The lower bound.
   */
  optional double lower_bound = 3;

  /**
   * The upper bound.
   */
  optional double upper_bound = 4;

  /**
   * A list of enumerated allowed values for the variable.
   * If this list is empty or unset any value may be used.
   */
  repeated double enum_values = 5;

  /**
   * A list of string aliases for the enumerated values.
   * This list may either be empty or unset (even if there are enumerated values),
   * indicating that there are no aliases,
   * or it should have one entry for each enumerated value.
   */
  repeated string enum_aliases = 6;
}

/**
 * A request to set the metadata for a double variable.
 */
message SetDoubleVariableMetadataRequest {
  /**
   * The target variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new metadata to use.
   */
  DoubleVariableMetadata new_metadata = 2;
}

/**
 * The metadata for a integer or integer array variable.
 */
message IntegerVariableMetadata {
  /**
   * The base metadata.
   */
  BaseVariableMetadata base_metadata = 1;

  /**
   * The numeric metadata.
   */
  NumericVariableMetadata numeric_metadata = 2;

  /**
   * The lower bound.
   */
  optional int32 lower_bound = 3;

  /**
   * The upper bound.
   */
  optional int32 upper_bound = 4;

  /**
   * A list of enumerated allowed values for the variable.
   * If this list is empty or unset any value may be used.
   */
  repeated int32 enum_values = 5;

  /**
   * A list of string aliases for the enumerated values.
   * This list may either be empty or unset (even if there are enumerated values),
   * indicating that there are no aliases,
   * or it should have one entry for each enumerated value.
   */
  repeated string enum_aliases = 6;
}

/**
 * A request to set the metadata of an integer or integer array.
 */
message SetIntegerVariableMetadataRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new metadata to use.
   */
  IntegerVariableMetadata new_metadata = 2;
}

/**
 * Metadata for a string or string array variable.
 */
message StringVariableMetadata {
  /**
   * The base metadata.
   */
  BaseVariableMetadata base_metadata = 1;

  /**
   * A list of enumerated allowed values for the variable.
   * If this list is empty or unset any value may be used.
   */
  repeated string enum_values = 2;

  /**
   * A list of string aliases for the enumerated values.
   * This list may either be empty or unset (even if there are enumerated values),
   * indicating that there are no aliases,
   * or it should have one entry for each enumerated value.
   */
  repeated string enum_aliases = 3;
}

/**
 * A request to set the metadata of a string or string array variable.
 */
message SetStringVariableMetadataRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new metadata to use.
   */
  StringVariableMetadata new_metadata = 2;
}

/**
 * Metadata for a file or file array variable.
 */
message FileVariableMetadata {
  /**
   * The base metadata.
   */
  BaseVariableMetadata base_metadata = 1;
}

/**
 * A request to set the metadata for a file variable.
 */
message SetFileVariableMetadataRequest {
  /**
   * The target variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new metadata to use.
   */
  FileVariableMetadata new_metadata = 2;
}


/**
 * Metadata for a reference or reference array variable.
 */
message ReferenceVariableMetadata {
  /**
   * The base metadata.
   */
  BaseVariableMetadata base_metadata = 1;
}

/**
 * One of the standard metadata types.
 */
message VariableMetadata {
  oneof value {
    IntegerVariableMetadata int_metadata = 1;
    DoubleVariableMetadata double_metadata = 2;
    BooleanVariableMetadata bool_metadata = 3;
    StringVariableMetadata string_metadata = 4;
    FileVariableMetadata file_metadata = 5;
  }
}

/**
 * A request to set the metadata for a reference or reference array variable.
 */
message SetReferenceVariableMetadataRequest {

  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  ReferenceVariableMetadata new_metadata = 2;
}


/**
 * A request to get the reference equation of a reference variable.
 */
message GetReferenceEquationRequest {
  /**
   * The id of the variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;
  /**
   * If the target is an array, this indicates the index of the array to target.
   * Otherwise this parameter is ignored.
   */
  optional int64 index = 2;
}

/**
 * A response to a request for the reference equation of a reference variable.
 */
message GetReferenceEquationResponse {
  /**
   * The requested reference equation.
   */
  string equation = 1;
}

/**
 * A request to set the reference equation of a reference variable.
 */
message SetReferenceEquationRequest {
  /**
   * The id of the variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;
  /**
   * If the target is an array, this indicates the index of the array to target.
   * Otherwise this parameter is ignored.
   */
  optional int64 index = 2;
  /**
   * The new reference equation.
   */
  string equation = 3;
}

/**
 * A response to a request to set the reference equation of a reference variable.
 */
message SetReferenceEquationResponse {

};

/**
 * A request to get the reference equation of a reference variable.
 */
message GetReferencedVariablesRequest {
  /**
   * The id of the variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;
  /**
   * If the target is an array, this indicates the index of the array to target.
   * Otherwise this parameter is ignored.
   */
  optional int64 index = 2;
}

/**
 * A response to a request for the variables referenced by a reference variable.
 */
message GetReferencedVariablesResponse {
  /**
   * The requested reference.
   */
  repeated ansys.api.modelcenter.v0.element_messages.ElementId referenced_variables = 1;
}

/**
 * A request to get if a reference variable refers directly to a single variable.
 */
message GetReferenceIsDirectRequest {
  /**
   * The id of the variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;
  /**
   * If the target is an array, this indicates the index of the array to target.
   * Otherwise this parameter is ignored.
   */
  optional int64 index = 2;
}

/**
 * A response to a request to get if a reference variable refers directly to a
 * single variable.
 */
message GetReferenceIsDirectResponse {
  /**
   * True if the reference refers directly to a single variable, False otherwise.
   */
  bool is_direct = 1;
}

/**
 * A way to identify a reference property.
 */
message ReferencePropertyIdentifier {
  /**
   * The reference variable the property exists on.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId reference_var = 1;

  /**
   * The property name.
   */
  string prop_name = 2;
}

/**
 * A way to identify a reference property and optionally an index
 * within the property for operations that target indexed items
 * in reference array properties.
 */
message IndexedReferencePropertyIdentifier {
  /**
   * The reference property of interest.
   */
  ReferencePropertyIdentifier target_prop = 1;

  /**
   * An index if the operation targets a particular index in
   * a property of a reference array.
   */
  optional int64 index = 2;
}

/**
 * A response indicating the available reference property names.
 */
message ReferencePropertyNames {
  repeated string names = 1;
}

/**
 * A request to set a reference value.
 */
message ReferencePropertySetValueRequest {
  /**
   * The reference property to set.
   */
  IndexedReferencePropertyIdentifier target_prop = 1;

  /**
   * The value to set.
   */
  VariableValue new_value = 2;
}

/**
 * A response to a request to set a reference value.
 */
message ReferencePropertySetValueResponse {
  /**
   * The previously set value.
   */
  VariableValue old_value = 1;
}

/**
 * A response indicating whether a reference property is an input.
 */
message ReferencePropertyGetIsInputResponse {
  /**
   * True if the property is an input.
   */
  bool is_input = 1;
}

/**
 * A response indicating what the title of a reference property is.
 */
message ReferencePropertyGetTitleResponse {
  /**
   * The title.
   */
  string title = 1;
}

/**
 * A request to set the allowed values for a reference property.
 */
message ReferencePropertySetEnumValuesRequest {
  /**
   * The target property.
   */
  ReferencePropertyIdentifier target = 1;

  /**
   * The allowed values.
   * An empty or unset list indicates that any value may be used.
   */
  repeated VariableValue values = 2;
}

/**
 * A response indicating what the allowed values for a reference property are.
 */
message ReferencePropertyGetEnumValuesResponse {
  /**
   * The allowed values.
   * An empty or unset list indicates that any value may be used.
   */
  repeated VariableValue values = 1;
}

/**
 * A request to set the description of a reference property.
 */
message ReferencePropertySetDescriptionRequest {
  /**
   * The target property.
   */
  ReferencePropertyIdentifier target = 1;

  /**
   * The new value for the description.
   */
  string new_value = 2;
}

/**
 * A response indicating what the description of a reference property is.
 */
message ReferencePropertyGetDescriptionResponse {
  /**
   * The description.
   */
  string description = 1;
}

/**
 * A response indicating what the type of a reference property is.
 */
message ReferencePropertyGetTypeResponse {
  /**
   * The type.
   */
  VariableType type = 1;
}

/**
 * An identifier and a type for a variable.
 */
message VariableInfo {
  /**
   * The identifier of the variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId id = 1;

  /**
   * The value type the variable stores.
   */
  VariableType value_type = 2;

  /**
   * The variable's short name.
   */
  string short_name = 3;
}

/**
 * A collection of variable information.
 */
message VariableInfoCollection {
  /**
   * Information on the requested variables.
   */
  repeated VariableInfo variables = 1;
}

/**
 * A request to fetch precedent (input) or dependent (output) variables.
 */
message GetVariableDependenciesRequest {
  /**
   * The identifier of the variable.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId id = 1;

  /**
   * Flag for if only dependencies directly linked to the variable should be fetched, or if all
   * dependencies should be returned recursively.
   */
  bool only_fetch_direct_dependencies = 2;

  /**
   * Flag for if dependencies with suspended links should be followed.
   */
  bool follow_suspended = 3;
}
