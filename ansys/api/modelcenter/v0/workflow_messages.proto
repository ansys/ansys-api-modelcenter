// Â©2023, ANSYS Inc. Unauthorized use, distribution or duplication is prohibited.

/*
 * This file contains messages related to manipulating or examining a workflow.
 */

syntax = "proto3";
package ansys.api.modelcenter.v0.workflow_messages;

import "ansys/api/modelcenter/v0/element_messages.proto";
import "ansys/api/modelcenter/v0/variable_value_messages.proto";

/**
 * The workflow's execution state.
 */
enum WorkflowInstanceState {
  /**
   * The state is unspecified.
   */
  WORKFLOW_INSTANCE_STATE_UNSPECIFIED = 0;

  /**
   * Some values in the workflow are not valid.
   * The workflow can be run to attempt to produce valid values for those variables.
   */
  WORKFLOW_INSTANCE_STATE_INVALID = 1;

  /**
   * The workflow is currently running.
   */
  WORKFLOW_INSTANCE_STATE_RUNNING = 2;

  /**
   * A workflow run was started and paused.
   */
  WORKFLOW_INSTANCE_STATE_PAUSED = 3;

  /**
   * A workflow run failed.
   */
  WORKFLOW_INSTANCE_STATE_FAILED = 4;

  /**
   * A workflow run succeeded.
   */
  WORKFLOW_INSTANCE_STATE_SUCCESS = 5;
}

/**
 * A request to get the state of the workflow.
 */
message GetWorkflowStateRequest {

}

/**
 * A response indicating what the state of the workflow is.
 */
message GetWorkflowStateResponse {
  WorkflowInstanceState state = 1;
}

/**
 * An identifier for an individual workflow instance.
 */
message WorkflowId {
  /**
   * The identifying string for the workflow instance.
   */
  string id = 1;
}

/**
 * An element ID combined with a name.
 */
message NamedElementWorkflow {
  /**
   * The workflow's ID.
   */
  WorkflowId workflow = 1;

  /**
   * The name of the element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementName element_full_name = 2;
}

/**
 * A request to run a workflow.
 */
message WorkflowRunRequest {
  /**
   * The target workflow.
   */
  WorkflowId target = 1;

  /**
   * Input values to be set before the run.
  * The keys in the map are variable names.
   */
  map<string, ansys.api.modelcenter.v0.variable_value_messages.VariableState> inputs = 2;

  /**
   * If true, reset the validity of all elements in the workflow before running.
   */
  bool reset = 3;

  /**
   * The workflow elements to validate.
   */
  repeated string validation_names = 4;

  /**
   * The names of the workflow elements to return when the run is complete.
  */
  repeated string collection_names = 5;
}

/**
 * A response to a request to run a workflow.
 */
message WorkflowRunResponse {
  /**
   * The requested variables.
   */
  map<string, ansys.api.modelcenter.v0.variable_value_messages.VariableState> results= 1;
}

/**
 * A request to halt the workflow.
 */
message WorkflowHaltRequest {

}

/**
 * A response to a request to halt the workflow.
 */
message WorkflowHaltResponse {

}

/**
 * A response to a request to run a workflow asynchronously.
 */
message WorkflowStartRunResponse {
}

/**
 * A response indicating the root element of a workflow.
 */
message WorkflowGetRootResponse {
  /**
   * The root element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId id = 1;
}

/**
 * A response indicating the directory in which the workflow is stored.
 */
message WorkflowGetDirectoryResponse {
  /**
   * The directory storing the workflow.
   */
  string workflow_dir = 1;
}

/**
 * A request to create a component within a workflow.
 */
message WorkflowCreateComponentRequest {
  /**
   * The source of the component.
   */
  string source_path = 1;

  /**
   * The component's short name.
   */
  string name = 2;

  /**
   * The parent element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId parent = 3;

  /**
   * An optional string used by the component to initialize itself.
   */
  optional string init_str = 4;

  /**
   * The position of the component.
   */
  oneof position {
    /**
     * Coordinates at which to place the new component.
     */
    ansys.api.modelcenter.v0.element_messages.AnalysisViewPosition coords = 5;

    /**
     * A component after which the new component should be placed.
     */
    ansys.api.modelcenter.v0.element_messages.ElementId after_comp = 6;
  }
}

/**
 * A response to a request to create a component.
 */
message WorkflowCreateComponentResponse {
  /**
   * The ID for the newly created component.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId created = 1;
}

/**
 * A request to create a link in the workflow.
 */
message WorkflowCreateLinkRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The expression that will drive the value of the target element
   */
  string equation = 2;
}

/**
 * A response to a request to create a link in the workflow.
 */
message WorkflowCreateLinkResponse {

}

/**
 * A response to a request to save the workflow.
 */
message WorkflowSaveResponse {

}

/**
 * A request to save the workflow to a new location.
 */
message WorkflowSaveAsRequest {
  /**
   * The target of the request.
   */
  WorkflowId target = 1;

  /**
   * The new path for saving the workflow.
   */
  string new_target_path = 2;
}

/**
 * A response to a request to close the workflow.
 */
message WorkflowCloseResponse {

}

/**
 * A request to remove a component from the workflow.
 */
message WorkflowRemoveComponentRequest {
  /**
   * The target element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;
}

/**
 * A response to a request to remove the component from the workflow.
 */
message WorkflowRemoveComponentResponse {
  /**
   * True if the component existed.
   */
  bool existed = 1;
}

// TODO: This should be renamed to something more like "DatapinLinkIdentifier".
/**
 * A request to break a link within the workflow.
 */
message WorkflowBreakLinkRequest {
  /**
   * The variable that is the "target"
   * end of the link to break.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target_var = 1;
}

/**
 * A request to suspend or resume a link.
 */
message WorkflowSuspendOrResumeLinkRequest {
  /**
   * The variable that is the lef-hand side (target) of the link.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target_link_lhs = 1;

  /**
   * True to suspend the link, false to resume it.
   */
  bool suspend = 2;
}

/**
 * A message indicating the suspension state of a link, either currently
 * or just before it was changed.
 */
message WorkflowLinkSuspension {
  /**
   * True if the link is (or was) suspended,
   * false if it is active.
   */
  bool is_suspended = 1;
}

/**
 * A response to a request to break a link.
 */
message WorkflowBreakLinkResponse {
  /**
   * True if a link existed to the specified variable.
   */
  bool existed = 1;
}

/**
 * A message containing information about a link.
 */
message WorkflowLinkInfo {
  /**
   * The target of the link.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId lhs = 1;

  /**
   * The expression that drives the value of the left-hand side of the link.
   */
  string rhs = 2;
}

/**
 * A request to automatically link two components.
 */
message WorkflowAutoLinkRequest {
  /**
   * The source component.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId source_comp = 1;

  /**
   * The target component.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target_comp = 2;
}

/**
 * A response to a request to auto-link two components.
 */
message WorkflowAutoLinkResponse {
  /**
   * The links created by the auto-link process.
   */
  repeated WorkflowLinkInfo created_links = 1;
}

/**
 * A response to a request for the links in the workflow.
 */
message WorkflowGetLinksResponse {
  /**
   * The links in the workflow.
   */
  repeated WorkflowLinkInfo links = 1;
}

/**
 * Information on an element.
 */
message ElementInfo {
  /*
   * The ID of the element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId id = 1;

  /*
   * The type of the element.
   */
  ansys.api.modelcenter.v0.element_messages.ElementType type = 2;

  /*
   * If the element is a variable, it's variable type.
   */
  optional ansys.api.modelcenter.v0.variable_value_messages.VariableType var_type = 3;
}

/**
 * Information about a collection of elements.
 */
message ElementInfoCollection {
  repeated ElementInfo elements = 1;
}


/*
 * Represents either an ElementName or ElementId, for calls that can handle both.
 */
message ElementIdOrName {
  oneof target {
    ansys.api.modelcenter.v0.element_messages.ElementId target_id = 1;
    NamedElementWorkflow target_name = 2;
  }
}


/**
 * Represents a request to delete an assembly variable.
 */
message DeleteAssemblyVariableRequest {
  ElementIdOrName target = 1;
}

/**
 * Represents a request to move a component.
 */
message MoveComponentRequest {
  /**
   * The component to move.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId target = 1;

  /**
   * The new parent for the component. This should be an assembly.
   */
  ansys.api.modelcenter.v0.element_messages.ElementId new_parent = 2;

  /**
   * The new index in the parent. Pass -1 to add the component at the end.
   * If the index is larger than the number of components in the element,
   * it will be placed at the end.
   */
  int32 index_parent = 3;
}
