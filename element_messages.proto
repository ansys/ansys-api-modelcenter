/*
 * This file contains messages related to management of workflow elements.
 */
syntax = "proto3";
package Ansys.ModelCenter.GRPCModelCenter;

/** 
 * Represents an element name.
 */
message ElementName {
   /**
    * The name.
    */
   string name = 1;
}

/**
 * Represents a unique identifier for an element.
 */
message ElementId {
   /**
    * An identifying string for this element.
    */
   // TODO: For now, we're using the ModelCenter path, but this has a couple of issues:
   // ARIA namespaces some things separately, such as assemblies and variables,
   // so you can make an assembly with the same full MC name as a variable,
   // and the API allows for renames.
   // We'll need to revisit this sooner than later.
   string id_string = 1;
}

/**
 * Represents a collection of element IDs.
 */
message ElementIdCollection {
   /**
    * The IDs of interest.
    */
   repeated ElementId ids = 1;
}

/**
 * Represents an assembly type within ModelCenter (such as a Data assembly, Sequence, etc).
 */
message AssemblyType {
   /**
    * The type of the assembly.
    */
   string type = 1;
}

/**
 * Represents a request to set the icon of an assembly.
 */
message AssemblyIconSetRequest {
   /**
    * The target element.
    */
   ElementId target = 1;

   /**
    * The new icon to use.
    */
   int64 new_icon_id = 2;
}

/**
 * The response from setting an icon.
 */
message AssemblyIconSetResponse {}

/**
 * Represents a response to a query about an icon.
 */
message AssemblyIconResponse {
   /**
    * The icon in use.
    */
   int64 id = 1;
}

/**
 * Represents an assembly's index in its parent.
 */
message ElementIndexInParentResponse {
	/**
	 * The index.
	 */
	int64 index = 1;
}

/**
 * Represents a position on the analysis view.
 */
message AnalysisViewPosition {
   int64 x_pos = 1;
   int64 y_pos = 2;
}

/**
 * Represents a request to add an assembly.
 */
message AddAssemblyRequest {
   /**
    * The short name for the new assembly.
    */
   ElementName name = 1;
   
   /**
    * The parent for the new assembly.
    */
   ElementId parent = 2;

   /**
    * The position in the analysis view for the new assembly.
    */
   AnalysisViewPosition av_pos = 3;

   /**
    * The type of the new assembly.
    * This should be one of:
    *    "Assembly", "Sequence", "If", "Parallel",
    *    "Empty", "Loop", "ForEach", "For",
    *    "While", "RepeatUntil".
    */
   string assembly_type = 4;
}

/**
 * Represents a response to adding an assembly.
 */
message AddAssemblyResponse{
   ElementId id = 1;
}

/**
 * Represents a request to add a variable to an assembly.
 */
message AddAssemblyVariableRequest {
   ElementName name = 1;
   ElementId target_assembly = 2;	
   string variable_type = 3;
}

/**
 * Represents a response to an attempt to add an assembly.
 */
message AddAssemblyVariableResponse {
   ElementId id = 1;
}

/**
 * Represents a request to rename an element.
 */
message RenameRequest {
   ElementId target_assembly = 1;
   ElementName new_name = 2;
}

/**
 * Represents a response to the request to rename an element.
 */
message RenameResponse {}

/**
 * Represents a request to delete an assembly variable.
 */
message DeleteAssemblyVariableRequest {
   ElementId target =1;
}

/**
 * Represents a response to an attempt to delete an assembly variable.
 */
message DeleteAssemblyVariableResponse {
   bool existed = 1;
}

/**
 * A response to a request for a component source.
 */
message ComponentSourceResponse {
   string source = 1;
}

/**
 * A response to a request to run an individual, specific component.
 */
message ComponentRunResponse {}

/**
 * A request to invoke a particular method on a component.
 */
message ComponentInvokeMethodRequest{
   /**
    * The target component.
    */
   ElementId target = 1;

   /**
    * The name of the method which should be invoked.
    */
   string method_name = 2;
}

/**
 * A response to a request to invoke a component method.
 */
message ComponentInvokeMethodResponse {}

/**
 * A response to a request to invalidate a component.
 */
message ComponentInvalidateResponse {}

/**
 * A response to a request to reconnect a component.
 */
message ComponentReconnectResponse {}

/**
 * A response to a request to download values for a component from MCRE.
 */
message ComponentDownloadValuesResponse {}
