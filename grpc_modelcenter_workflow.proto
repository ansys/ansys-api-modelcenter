syntax = "proto3";
package Ansys.ModelCenter.GRPCModelCenter;

import "element_messages.proto";
import "custom_metadata_messages.proto";
import "variable_value_messages.proto";
import "workflow_messages.proto";

service ModelCenterWorkflowService {

   /**
    * Get an element name.
    */
   rpc ElementGetName(ElementId) returns (ElementName);
   
   /**
    * Get an element's full name.

    */
   rpc ElementGetFullName(ElementId) returns (ElementName);
   
   /**
    * Get the parent element of an element.

    */
   rpc ElementGetParentElement(ElementId) returns (ElementInfo);
   
   /**
    * Get the custom metadata properties available for an element.
    */
   rpc PropertyOwnerGetProperties(ElementId) returns (MetadataPropertyNamesResponse);
   
   /**
    * Set the value of a custom metadata property.
	*
	* NOT_FOUND if the specified element does not exist.
	* INVALID_ARGUMENT if the property value is missing.
    */
   rpc PropertyOwnerSetPropertyValue(MetadataSetValueRequest) returns (MetadataSetValueResponse);
   
   /**
    * Get the value of a custom metadata property.
	*
	* NOT_FOUND if the specified element does not exist.
	* INVALID_ARGUMENT if the specified property doesn't exist
    */
   rpc PropertyOwnerGetPropertyValue(MetadataGetValueRequest) returns (VariableValue);
   
   /**
    * Get the variables available on an assembly.
    */
   rpc RegistryGetVariables(ElementId) returns (VariableInfoCollection);
   
   /**
    * Get the groups available on an assembly.
    */
   rpc RegistryGetGroups(ElementId) returns (ElementIdCollection);
   
   /**
    * Get the type of an assembly.
    */
   rpc RegistryGetControlType(ElementId) returns (AssemblyType);
   
   /**
    * Get the child assemblies and components of an assembly.
	*/
   rpc AssemblyGetAssembliesAndComponents(ElementId) returns (ElementInfoCollection);
   
   /**
    * Add a child assembly.
	*
	* NOT_FOUND if the specified parent assembly can't be found.
	* INVALID_ARGUMENT if the name / position / type are invalid.
	* ALREADY_EXISTS if there is a name collision
    */
   rpc AssemblyAddAssembly(AddAssemblyRequest) returns (AddAssemblyResponse);
   
   /**
    * Add a variable to an assembly.
	*
	* NOT_FOUND if the specified parent assembly can't be found.
	* INVALID_ARGUMENT if the name / position / type are invalid.
	* ALREADY_EXISTS if theere is a name collision
    */
   rpc AssemblyAddVariable(AddAssemblyVariableRequest) returns (AddAssemblyVariableResponse);
   
   /**
    * Delete a variable on an assembly.
	*
	* NOT_FOUND if the specified parent assembly can't be found.
	* No error should be raised if the specified variable is already nonexistent (see response).
    */
   rpc AssemblyDeleteVariable(DeleteAssemblyVariableRequest) returns (DeleteAssemblyVariableResponse);
   
   /**
    * Rename an assembly.
	*
	* NOT_FOUND if the specified parent assembly can't be found.
	* INVALID_ARGUMENT if the new name is invalid.
	* ALREADY_EXISTS if there is a name collision.
    */
   rpc AssemblyRename(RenameRequest) returns (RenameResponse);
   
   /**
    * Set an assembly's icon.
	*/
   rpc AssemblySetIcon(AssemblyIconSetRequest) returns (AssemblyIconSetResponse);
   
   /**
    * Get an assembly's icon.
	*/
    rpc AssemblyGetIcon(ElementId) returns (AssemblyIconResponse);

   /**
    * Get an element's index in its parent.
	*/
    rpc ElementGetIndexInParent(ElementId) returns (ElementIndexInParentResponse);
   
   /**
    * Get an assembly's position on the analysis view.
    */
   rpc AssemblyGetAnalysisViewPosition(ElementId) returns (AnalysisViewPosition);
   
   /**
    * Get an assembly's source.
    */
   rpc ComponentGetSource(ElementId) returns (ComponentSourceResponse);
   
   /**
    * Get a component's pacz URL.
    */
   rpc ComponentGetPaczUrl(ElementId) returns (ComponentPaczUrlResponse);

   /**
    * Run the specified component.
    */
   rpc ComponentRun(ElementId) returns (ComponentRunResponse);
   
    /**
     * Invoke a method on the specified component.
	 *
	 * NOT_FOUND if the target component doesn't exist
	 * INVALID_ARGUMENT if the target method can't be found
	 * FAILED_PRECONDITION if the method run fails
     */
    rpc ComponentInvokeMethod(ComponentInvokeMethodRequest) returns (ComponentInvokeMethodResponse);
    
    /**
     * Invalidate the specified component.
     */
    rpc ComponentInvalidate(ElementId) returns (ComponentInvalidateResponse);
    
    /**
     * Reconnect or reload the specified component.
	 *
	 * FAILED_PRECONDITION if the reconnect fails
     */
    rpc ComponentReconnect(ElementId) returns (ComponentReconnectResponse);
    
    /**
     * Download the component's variable values if it is a ModelCenter Remote Execution component.
	 *
	 * FAILED_PRECONDITION if the download fails
     */
    rpc ComponentDownloadValues(ElementId) returns (ComponentDownloadValuesResponse);

    /*
     * Get if a component is connected to its source.
     * A component may be disconnected from its source if it fails to connect on load, and 
     * OnConnectionModeError is set to IGNORE.
     */
    rpc ComponentIsConnected(ElementId) returns (ComponentIsConnectedResponse);

    /**
     * Get whether the branching condition is exclusive.
     */
    rpc IfComponentGetExclusive(ElementId) returns (IfComponentGetExclusiveResponse);

    /**
     * Set whether the branching condition is exclusive.
     */
    rpc IfComponentSetExclusive(IfComponentSetExclusiveRequest) returns (IfComponentSetExclusiveResponse);

    /**
     * Get if there is an else branch that is run if no conditions are met.
     */
    rpc IfComponentGetRunLastBranchByDefault(ElementId) returns (IfComponentGetRunLastBranchByDefaultResponse);

    /**
     * Set if there is an else branch that is run if no conditions are met.
     */
    rpc IfComponentSetRunLastBranchByDefault(IfComponentSetRunLastBranchByDefaultRequest) returns (IfComponentSetRunLastBranchByDefaultResponse);

    /**
     * Get the number of branches.
     */
    rpc IfComponentGetNumberOfBranches(ElementId) returns (IfComponentGetNumberOfBranchesResponse);

    /**
     * Get the branch condition for a branch.
     */
    rpc IfComponentGetBranchCondition(IfComponentGetBranchConditionRequest) returns (IfComponentGetBranchConditionResponse);

    /**
     * Set the branch condition for a branch.
     */
    rpc IfComponentSetBranchCondition(IfComponentSetBranchConditionRequest) returns (IfComponentSetBranchConditionResponse);

    /**
     * Get the name of a branch.
     */
    rpc IfComponentGetBranchName(IfComponentGetBranchNameRequest) returns (IfComponentGetBranchNameResponse);

    /**
     * Set the name of a branch.
     */
    rpc IfComponentSetBranchName(IfComponentSetBranchNameRequest) returns (IfComponentSetBranchNameResponse);

    /**
     * Get the data type of a variable.
     */
    rpc VariableGetType(ElementId) returns (VariableTypeResponse);

    /**
     * Get the state of a variable.
     */
    rpc VariableGetState(ElementIdOrName) returns (VariableState);
    
	// TODO: May be able to delete
    /**
     * Get the value of a double array variable.
     */
    rpc DoubleArrayGetValue(ElementId) returns (DoubleArrayValue);
    
    /**
     * Set the value of a double array variable.
	 *
	 * NOT_FOUND if target variable cannot be located
	 * INVALID_ARGUMENT if target variable is not a double array
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc DoubleArraySetValue(SetDoubleArrayValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a file array variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc FileArrayGetValue(ElementId) returns (FileArrayValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a file array variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc FileArrayGetValueAbsolute(ElementId) returns (FileArrayValue);
    
    /**
     * Set the value of a file array variable.
     */
    rpc FileArraySetValue(SetFileArrayValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a integer array variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc IntegerArrayGetValue(ElementId) returns (IntegerArrayValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a integer array variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
	 *
	 * NOT_FOUND if target variable cannot be located
     */
    rpc IntegerArrayGetValueAbsolute(ElementId) returns (IntegerArrayValue);
	
    /**
     * Set the value of a integer array variable.
	 *
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUEMNT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc IntegerArraySetValue(SetIntegerArrayValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a boolean array variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc BooleanArrayGetValue(ElementId) returns (BooleanArrayValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a boolean array variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc BooleanArrayGetValueAbsolute(ElementId) returns (BooleanArrayValue);
    
    /**
     * Set the value of a boolean array variable.
	 *
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUEMNT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc BooleanArraySetValue(SetBooleanArrayValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a string array variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc StringArrayGetValue(ElementId) returns (StringArrayValue);
   
    // TODO: May be able to delete
    /**
     * Get the value of a string array variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc StringArrayGetValueAbsolute(ElementId) returns (StringArrayValue);
   
    /**
     * Set the value of a string array variable.
	 *
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUEMNT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc StringArraySetValue(SetStringArrayValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a double variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc DoubleVariableGetValue(ElementId) returns (DoubleValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a double variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc DoubleVariableGetValueAbsolute(ElementId) returns (DoubleValue);
    
    /**
     * Set the value of a double array variable.
	 *
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUEMNT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc DoubleVariableSetValue(SetDoubleValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a integer variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc IntegerVariableGetValue(ElementId) returns (IntegerValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a integer variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc IntegerVariableGetValueAbsolute(ElementId) returns (IntegerValue);
    
    /**
     * Set the value of a integer array variable.
	 *
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUEMNT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc IntegerVariableSetValue(SetIntegerValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a boolean variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc BooleanVariableGetValue(ElementId) returns (BooleanValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a boolean variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc BooleanVariableGetValueAbsolute(ElementId) returns (BooleanValue);
    
    /**
     * Set the value of a boolean array variable.
	 *
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUEMNT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc BooleanVariableSetValue(SetBooleanValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a string variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc StringVariableGetValue(ElementId) returns (StringValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a string variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc StringVariableGetValueAbsolute(ElementId) returns (StringValue);
    
    /**
     * Set the value of a string array variable.
	 *
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUEMNT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc StringVariableSetValue(SetStringValueRequest) returns (SetVariableValueResponse);
    
	// TODO: May be able to delete
    /**
     * Get the value of a file variable.
     * If necessary, the workflow will be run such that the variable value is valid
     * before the value is returned.
     */
    rpc FileVariableGetValue(ElementId) returns (FileValue);
    
	// TODO: May be able to delete
    /**
     * Get the value of a file variable.
     * No attempt is made to ensure that the workflow is run to validate the value.
     */
    rpc FileVariableGetValueAbsolute(ElementId) returns (FileValue);
    
    /**
     * Set the value of a file array variable.
	 * 
	 * NOT_FOUND if the target variable cannot be located
	 * INVALID_ARGUMENT if target variable is not the right type
	 * OUT_OF_RANGE if bounds or enum constraints are violated
     */
    rpc FileVariableSetValue(SetFileValueRequest) returns (SetVariableValueResponse);
	
	/**
	 * Get whether or not a variable is an input to its component and in the workflow.
	 */
	rpc VariableGetIsInput(ElementId) returns (VariableIsInputResponse);

    /**
     * Get the metadata for a boolean or boolean array variable.
     */
    rpc BooleanVariableGetMetadata(ElementId) returns (BooleanVariableMetadata);

    /**
     * Get the metadata for a double or double array variable.
     */
    rpc DoubleVariableGetMetadata(ElementId) returns (DoubleVariableMetadata);
    
    /**
     * Get the metadata for an integer or integer array variable.
     */
    rpc IntegerVariableGetMetadata(ElementId) returns (IntegerVariableMetadata);
    
    /**
     * Get the metadata for a string or string array variable.
     */
    rpc StringVariableGetMetadata(ElementId) returns (StringVariableMetadata);
    
    /**
     * Get the metadata for a file or file array variable.
     */
    rpc FileVariableGetMetadata(ElementId) returns (FileVariableMetadata);

    /**
     * Set the metadata for a boolean or boolean array variable.
	 *
	 * NOT_FOUND if the target element can't be found
	 * INVALID_ARGUMENT if the target element is not a boolean or boolean array
     */
    rpc BooleanVariableSetMetadata(SetBooleanVariableMetadataRequest) returns (SetMetadataResponse);

    /**
     * Set the metadata for a double or double array variable.
	 *
	 * NOT_FOUND if the target element can't be found
	 * INVALID_ARGUMENT if the target element is not a double or double array
     */
    rpc DoubleVariableSetMetadata(SetDoubleVariableMetadataRequest) returns (SetMetadataResponse);
    
    /**
     * Set the metadata for an integer or integer array variable.
	 *
	 * NOT_FOUND if the target element can't be found
	 * INVALID_ARGUMENT if the target element is not an integer or integer array
     */
    rpc IntegerVariableSetMetadata(SetIntegerVariableMetadataRequest) returns (SetMetadataResponse);
    
    /**
     * Set the metadata for a string or string array variable.
	 *
	 * NOT_FOUND if the target element can't be found
	 * INVALID_ARGUMENT if the target element is not a string or string array
     */
    rpc StringVariableSetMetadata(SetStringVariableMetadataRequest) returns (SetMetadataResponse);
    
    /**
     * Set the metadata for a file or file array variable.
	 *
	 * NOT_FOUND if the target element can't be found
	 * INVALID_ARGUMENT if the target element is not a file or file array
     */
    rpc FileVariableSetMetadata(SetFileVariableMetadataRequest) returns (SetMetadataResponse);

    /**
     * Get the state of the workflow's execution.
     */
    rpc WorkflowGetState(GetWorkflowStateRequest) returns (GetWorkflowStateResponse);
    
    /**
     * Execute the workflow.
	 *
	 * NOT_FOUND if the target workflow doesn't exist
	 * INVALID_ARGUMENT if there are:
	 *      invalid names in the request
	 *      mismatched types for values in the request
	 * OUT_OF_RANGE if input values violate enum, bounds
     */
    rpc WorkflowRun(WorkflowRunRequest) returns (WorkflowRunResponse);
    
    /**
     * Start executing the workflow, and allow it to run asynchronously.
	 *
	* NOT_FOUND if the target workflow doesn't exist
	 * INVALID_ARGUMENT if there are:
	 *      invalid names in the request
	 *      mismatched types for values in the request
	 * OUT_OF_RANGE if input values violate enum, bounds
     */
    rpc WorkflowStartRun(WorkflowRunRequest) returns (WorkflowStartRunResponse);

    /**
     * Stop executing the workflow.
     */
    rpc WorkflowHalt(WorkflowHaltRequest) returns (WorkflowHaltResponse);
    
    /**
     * Get the root element of the workflow.
     */
    rpc WorkflowGetRoot(WorkflowId) returns (WorkflowGetRootResponse);
    
    /**
     * Get the directory for a workflow.
     */
    rpc WorkflowGetDirectory(WorkflowId) returns (WorkflowGetDirectoryResponse);
    
    /**
     * Create a component within the workflow.
	 * 
	 * NOT_FOUND if the parent assembly isn't found
	 * INVALID_ARGUMENT if:
	 *     connection fails, name is invalid
	 * ALREADY_EXISTS if:
	 *      name is invalid
     */
    rpc WorkflowCreateComponent(WorkflowCreateComponentRequest) returns (WorkflowCreateComponentResponse);
    
    /**
     * Create a link within the workflow.
	 *
	 * INVALID_ARGUMENT if: LHS or RHS are not valid
     */
    rpc WorkflowCreateLink(WorkflowCreateLinkRequest) returns (WorkflowCreateLinkResponse);
    
    /**
     * Save the workflow to its current location.
     */
    rpc WorkflowSave(WorkflowId) returns (WorkflowSaveResponse);
    
    /**
     * Save the workflow to a new location.
	 *
	 * INVALID_ARGUMENT if: new path is not valid
     */
    rpc WorkflowSaveAs(WorkflowSaveAsRequest) returns (WorkflowSaveResponse);
    
    /**
     * Close the workflow.
	 * 
	 * NOT_FOUND if specified workflow does not exist
     */
    rpc WorkflowClose(WorkflowId) returns (WorkflowCloseResponse);
    
    /**
     * Remove a component from the workflow.
	 *
	 * Does not error if the specified component has already been removed.
     */
    rpc WorkflowRemoveComponent(WorkflowRemoveComponentRequest) returns (WorkflowRemoveComponentResponse);
    
    /**
     * Break a link within the workflow.
	 *
	 * NOT_FOUND if the lhs isn't valid
     */
    rpc WorkflowBreakLink(WorkflowBreakLinkRequest) returns (WorkflowBreakLinkResponse);
    
    /**
     * Auto-link two components within the workflow.
     * The created links are returned.
	 *
	 * INVALID_ARGUMENT if either component can't be located.
     */
    rpc WorkflowAutoLink(WorkflowAutoLinkRequest) returns (WorkflowAutoLinkResponse);
    
    /**
     * Get a list of all the links in the workflow.
     */
    rpc WorkflowGetLinksRequest(WorkflowId) returns (WorkflowGetLinksResponse);
    
    /**
     * Get a component or assembly's ID and type by name.
     */
    rpc WorkflowGetElementByName(NamedElementInWorkflow) returns (ElementInfo);
    
    /**
     * Get the reference of a referenced variable.
     */
    rpc ReferenceVariableGetReference(ElementId) returns (ReferenceResponse);
    
    /**
     * Get the variables referenced by a reference variable.
     */
    rpc ReferenceVariableGetReferencedVariables(ElementId) returns (ReferencedVariablesResponse);
    
    /**
     * Create a real-type reference property.
     */
    rpc RealReferencePropertyCreate(ReferencePropertyIdentifier) returns (ReferencePropertyCreateResponse);
    
    /**
     * Get the value of a reference property.
     * If necessary, the workflow is executed to ensure the value is valid.
     */
    rpc ReferencePropertyGetValue(ReferencePropertyIdentifier) returns (VariableValue);
    
    /**
     * Get the value of a reference property.
     * No attempt is made to execute the workflow to ensure the value's validity.
     */
    rpc ReferencePropertyGetValueAbsolute(ReferencePropertyIdentifier) returns (VariableState);
    
    /**
     * Set the value of a reference property.
     */
    rpc ReferencePropertySetValue(ReferencePropertySetValueRequest) returns (ReferencePropertySetValueResponse);
    
    /**
     * Get whether a reference property is an input.
     */
    rpc ReferencePropertyGetIsInput(ReferencePropertyIdentifier) returns (ReferencePropertyGetIsInputResponse);
    
    /**
     * Set whether a reference property should be an input.
     */
    rpc ReferencePropertySetIsInput(ReferencePropertySetIsInputRequest) returns (ReferencePropertyGetIsInputResponse);
    
    /**
     * Get the allowed enumerated values for a reference property.
     */
    rpc ReferencePropertyGetEnumValues(ReferencePropertyIdentifier) returns (ReferencePropertyGetEnumValuesResponse);
    
    /**
     * Set the allowed enumerated values for a reference property.
     */
    rpc ReferencePropertySetEnumValues(ReferencePropertySetEnumValuesRequest) returns (ReferencePropertyGetEnumValuesResponse);
    
    /**
     * Get the title of a reference property.
     */
    rpc ReferencePropertyGetTitle(ReferencePropertyIdentifier) returns (ReferencePropertyGetTitleResponse);
    
    /**
     * Set the title of a reference property.
     */
    rpc ReferencePropertySetTitle(ReferencePropertySetTitleRequest) returns (ReferencePropertyGetTitleResponse);
    
    /**
     * Get the description of a reference property.
     */
    rpc ReferencePropertyGetDescription(ReferencePropertyIdentifier) returns (ReferencePropertyGetDescriptionResponse);
    
    /**
     * Set the description of a reference property.
     */
    rpc ReferencePropertySetDescription(ReferencePropertySetDescriptionRequest) returns (ReferencePropertyGetDescriptionResponse);
    
    /**
     * Get the type of a reference property.
     */
    rpc ReferencePropertyGetType(ReferencePropertyIdentifier) returns (ReferencePropertyGetTypeResponse);
}
